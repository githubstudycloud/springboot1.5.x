在 Spring Boot 1.5.22 下，静态类可以通过 `ResourceUtils` 工具类获取 resources 目录下的静态文件内容。下面是一个示例，演示如何读取一个名为 `data.txt` 的文本文件：

```java
import org.springframework.util.ResourceUtils;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

public class StaticFileUtil {

    public static String readFileContent(String fileName) {
        try {
            File file = ResourceUtils.getFile("classpath:" + fileName);
            return Files.readString(file.toPath());
        } catch (IOException e) {
            throw new RuntimeException("Error reading file: " + fileName, e);
        }
    }
}
```

**解释：**

1. **导入 `ResourceUtils`：** 引入 Spring 的 `ResourceUtils` 工具类，用于获取资源文件。
2. **`readFileContent` 方法：**
   - 接受文件名作为参数。
   - 使用 `ResourceUtils.getFile("classpath:" + fileName)` 获取文件。`classpath:` 前缀表示从类路径下查找资源。
   - 使用 `Files.readString(file.toPath())` 读取文件内容，并将其作为字符串返回。
   - 如果读取过程中发生异常，则抛出 `RuntimeException`。

**使用方法：**

```java
public class MyStaticClass {
    public static void main(String[] args) {
        String content = StaticFileUtil.readFileContent("data.txt");
        System.out.println(content);
    }
}
```

**注意事项：**

* **文件路径：** 确保 `data.txt` 文件位于 `src/main/resources` 目录下，或者在你的构建配置中将该目录添加到类路径。
* **异常处理：** 由于文件读取可能抛出 `IOException`，因此在 `readFileContent` 方法中添加了异常处理。你可以根据实际需求修改异常处理逻辑。
* **Spring Boot 2.x 及更高版本：** 如果你使用的是 Spring Boot 2.x 或更高版本，建议使用 `ResourceLoader` 或 `@Value` 注解来获取资源文件，这样可以更好地利用 Spring 的资源管理机制。

**示例：**

如果 `data.txt` 文件内容为 "Hello, world!"，那么上述代码的输出将是：

```
Hello, world!
```

**资源加载方式对比：**

| 方式              | Spring Boot 1.5.22 | Spring Boot 2.x 及更高版本 |
| ----------------- | ------------------- | -------------------------- |
| 静态类获取资源文件 | `ResourceUtils`      | `ResourceLoader`, `@Value`   |
| 优点              | 简单易用            | 更好的资源管理，更灵活        |
| 缺点              | 异常处理繁琐        | 需要依赖注入                |
好的，如果您使用的是 Java 8 之前的版本，确实没有 `Files.readString` 方法。您可以使用以下几种方式来读取文件内容并打印：

**1. 使用 BufferedReader：**

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FilePrinter {

    public static void printFileContent(File file) {
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.err.println("读取文件时出错: " + e.getMessage());
        }
    }
}
```

**解释：**

- `BufferedReader` 提供了缓冲读取功能，可以提高读取效率。
- `FileReader` 用于从文件中读取字符。
- `try-with-resources` 语句确保在读取完成后自动关闭资源。
- 逐行读取文件内容，并打印每一行。

**2. 使用 Scanner：**

```java
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class FilePrinter {

    public static void printFileContent(File file) {
        try (Scanner scanner = new Scanner(file)) {
            while (scanner.hasNextLine()) {
                System.out.println(scanner.nextLine());
            }
        } catch (FileNotFoundException e) {
            System.err.println("文件未找到: " + e.getMessage());
        }
    }
}
```

**解释：**

- `Scanner` 提供了更方便的文本解析功能。
- 逐行读取文件内容，并打印每一行。

**3. 手动读取字节并转换为字符串（不推荐）：**

```java
import java.io.FileInputStream;
import java.io.IOException;

public class FilePrinter {

    public static void printFileContent(File file) {
        try (FileInputStream fis = new FileInputStream(file)) {
            byte[] data = new byte[(int) file.length()];
            fis.read(data);
            String content = new String(data, "UTF-8"); // 或者指定其他编码
            System.out.println(content);
        } catch (IOException e) {
            System.err.println("读取文件时出错: " + e.getMessage());
        }
    }
}
```

**解释：**

- 直接读取文件的字节内容。
- 将字节数组转换为字符串。
- 需要注意文件编码，否则可能会出现乱码。

**建议：**

- 优先使用 `BufferedReader`，因为它提供了更好的性能和灵活性。
- 如果需要更方便的文本解析功能，可以使用 `Scanner`。
- 避免直接读取字节并转换为字符串，除非你有特殊需求。

无论使用哪种方法，都应该注意处理 `IOException`，以确保代码的健壮性。
